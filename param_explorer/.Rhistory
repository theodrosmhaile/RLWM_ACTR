mlat.tot4 <- lm(MLAT_IV ~ compositeSpan + Ravens.Score + X3Back_Total.ACC,  data = uclimb.dat.comp)
#summary(mlat4.lm)
summary(mlat.tot)
compositeSpan <- rowMeans(cbind(scale(uclimb.Dat$RspanScore),scale(uclimb.Dat$OspanAbsoluteScore), scale(uclimb.Dat$SspanAbsoluteScore)))
uclimb.dat.comp <- cbind(uclimb.Dat,compositeSpan )
mlat4.lm <- lm(MLAT_IV ~ compositeSpan +PSS_All.ACC  , data = uclimb.dat.comp)
mlat.tot4 <- lm(MLAT_IV ~ compositeSpan + Ravens.Score + X3Back_Total.ACC,  data = uclimb.dat.comp)
#summary(mlat4.lm)
summary(mlat.tot4)
compositeSpan <- rowMeans(cbind(scale(uclimb.Dat$RspanScore),scale(uclimb.Dat$OspanAbsoluteScore), scale(uclimb.Dat$SspanAbsoluteScore)))
uclimb.dat.comp <- cbind(uclimb.Dat,compositeSpan )
mlat4.lm <- lm(MLAT_IV ~ compositeSpan +PSS_All.ACC  , data = uclimb.dat.comp)
mlat.tot5 <- lm(MLAT_V ~ compositeSpan + Ravens.Score + X3Back_Total.ACC,  data = uclimb.dat.comp)
#summary(mlat4.lm)
summary(mlat.tot5)
compositeSpan <- rowMeans(cbind(scale(uclimb.Dat$RspanScore),scale(uclimb.Dat$OspanAbsoluteScore), scale(uclimb.Dat$SspanAbsoluteScore)))
uclimb.dat.comp <- cbind(uclimb.Dat,compositeSpan )
mlat4.lm <- lm(MLAT_IV ~ compositeSpan +PSS_All.ACC  , data = uclimb.dat.comp)
mlat.tot5 <- lm(MLAT_I ~ compositeSpan + Ravens.Score + X3Back_Total.ACC,  data = uclimb.dat.comp)
#summary(mlat4.lm)
summary(mlat.tot5)
compositeSpan <- rowMeans(cbind(scale(uclimb.Dat$RspanScore),scale(uclimb.Dat$OspanAbsoluteScore), scale(uclimb.Dat$SspanAbsoluteScore)))
uclimb.dat.comp <- cbind(uclimb.Dat,compositeSpan )
mlat4.lm <- lm(MLAT_IV ~ compositeSpan +PSS_All.ACC  , data = uclimb.dat.comp)
mlat.tot5 <- lm(MLAT_II ~ compositeSpan + Ravens.Score + X3Back_Total.ACC,  data = uclimb.dat.comp)
#summary(mlat4.lm)
summary(mlat.tot5)
compositeSpan <- rowMeans(cbind(scale(uclimb.Dat$RspanScore),scale(uclimb.Dat$OspanAbsoluteScore), scale(uclimb.Dat$SspanAbsoluteScore)))
uclimb.dat.comp <- cbind(uclimb.Dat,compositeSpan )
mlat4.lm <- lm(MLAT_IV ~ compositeSpan +PSS_All.ACC  , data = uclimb.dat.comp)
mlat.tot5 <- lm(MLAT_III ~ compositeSpan + Ravens.Score + X3Back_Total.ACC,  data = uclimb.dat.comp)
#summary(mlat4.lm)
summary(mlat.tot5)
plot(uclimb.dat.comp$Simon_Con.Incon.ACC, uclimb.Dat$PSS_AvoidB.ACC)
plot(uclimb.dat.comp$Simon_Con.Incon.ACC, uclimb.Dat$PSS_AvoidB.ACC)
mlat.tot5
mlat.tot5$residuals
plot(mlat.tot5$residuals)
plot(mlat4.lm$residuals)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() #+ scale_x#   + geom_axi
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() #+ scale_x#   + geom_axi
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() +scale_colour_gradient(..., low = "#132B43", high = "#56B1F7",
space = "Lab", na.value = "grey50", guide = "colourbar",
aesthetics = "colour") #+ scale_x#   + geom_axi
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() +scale_colour_gradient( low = "#132B43", high = "#56B1F7",
space = "Lab", na.value = "grey50", guide = "colourbar",
aesthetics = "colour") #+ scale_x#   + geom_axi
#factanal(cog.dat, factors = 4)
scales::seq_gradient_pal()
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() +scale_colour_brewer( type = "seq", palette = 1, direction = 1,
aesthetics = "colour")
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() +scale_colour_brewer( type = "seq", palette = 2, direction = 2,
aesthetics = "colour")
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value)) + geom_raster() +scale_colour_brewer( type = "seq", palette = 2, direction = 2)#,
#aesthetics = "colour")
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value, palette())) + geom_raster() +scale_colour_brewer( type = "seq", palette = 2, direction = 2)#,
#aesthetics = "colour")
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value, palette("warm"))) + geom_raster() +scale_colour_brewer( type = "seq", palette = 2, direction = 2)#,
#aesthetics = "colour")
#factanal(cog.dat, factors = 4)
library(reshape2)
m = cor(cog.dat) #matrix(rnorm(20),5)
ggplot(melt(m), aes(Var1,Var2, fill=value, palette("warm"))) + geom_raster()
#aesthetics = "colour")
#factanal(cog.dat, factors = 4)
mds
autoplot(melt(m))
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p")
text(x, y, labels = names(x), cex=.4, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p")
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6))
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 2)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 3)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 4)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- sammon(d,eig=TRUE, k=2) # k is the number of dim
library(MASS)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
library(tidyverse)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
library(dplyr)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% dplyr::select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- sammon(d,eig=TRUE, k=2) # k is the number of dim
library(MASS)
sammon()
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% dplyr::select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- sammon(d, k=2) # k is the number of dim eig=TRUE
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% dplyr::select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- isoMDS(d, k=2) # k is the number of dim eig=TRUE
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% dplyr::select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- isoMDS(d, k=3) # k is the number of dim eig=TRUE
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
text(x, y, labels = names(x), cex=.6, pos = 1)
#cor(cog.dat)
fit$points[,3]
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% dplyr::select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- isoMDS(d, k=3) # k is the number of dim eig=TRUE
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
z <- fit$points[,3]
#plot(th.corners[1,],th.corners[2,], pch = 19)
plot(x, y,z, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
demo(persp)
#Triad cognitive organization
cog.dat <- uclimb.Dat %>% dplyr::select(Age, Sex, Ravens.Score, PSS_All.ACC, OspanAbsoluteScore,MLAT_I, MLAT_III, MLAT_II, MLAT_IV, RspanTotal,MLAT_V, MLAT_Total, SspanAbsoluteScore,X3Back_Total.ACC,PSS_.TrainTrails )%>% na.omit() %>%
scale()
d <- dist(t(data.frame(cog.dat))) # euclidean distances between the rows
fit <- isoMDS(d, k=3) # k is the number of dim eig=TRUE
#fit # view results
#plot solution
x <- fit$points[,1]
y <- fit$points[,2]
z <- fit$points[,3]
#plot(th.corners[1,],th.corners[2,], pch = 19)
persp(x, y,z, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS 2", type = "p", xlim = c(-6,6), ylim = c(-6,8))
persp(x,y,z)
x
x
scatter
library(plot3d)
install.packages("plot3D")
library(plot3D)
scatter3D(x,y,z)
scatter3D(x,y,z)
setwd('~/google-drive')
pwd
dir()
setwd('~/google-drive/CCDL Shared/Shared/Teddy/Spillover_Rules/Rules/')
dir()
file.edit('Rules_fmri_param.rmd')
file.edit('Rules_behavioral_data_analysis.rmd')
install.packages('tinytex')
Sys.which()
Sys.which('octave')
Sys.which('python')
Sys.which('Octave')
knitr::opts_chunk$set(engine.path = list(
octave = '/Applications/Octave-4.4.1.app/Contents/Resources/usr/Cellar/octave-octave-app_4.4.1_0/4.4.1/bin/octave',
))
knitr::opts_chunk$set(engine.path = list(
octave = '/Applications/Octave-4.4.1.app/Contents/Resources/usr/Cellar/octave-octave-app_4.4.1_0/4.4.1/bin/octave'
))
rm(list = ls())
#library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(rprime)
library(stringr)
library(stringi)
library(matlab)
library(readxl)
library(knitr)
dprime <- function(hit,fa) {
qnorm(hit) - qnorm(fa)
}
#Behavioral E-Prime datafiles of interest
#read in filenames for text files
AllFiles <- dir('./raw_data/',pattern = '.txt')
FileNames <- AllFiles[grep("P(A|I)I", AllFiles)]  #Files with non-instructed, trial and error blocks
e.prime.dat.subjects <-  substring(AllFiles, first = 20, last = 24) %>% as.numeric() %>% unique() %>% sort()
FileNames.instr <-  AllFiles[grep("P(A|I)E", AllFiles)] #Files with instructed blocks
#fMRI notes excel sheet from JA: extract number of participants
fMRI.notes <- read_excel('./psychometric_data/fMRInotes_06.28.19.xlsx')
fMRI.notes.subjects <- (unique(fMRI.notes$`Expt #`))
# These are subject IDs from CERES of available scan data
scanned.fMRI.subjects <- read_csv('./psychometric_data/SpillOverScanFiles.txt', col_names = F)
#Psychometric data opsan and Nelson-Denny data from Spillover-Sentences project:
#     columns 5-9 are opspan and Nelson-Denny
#     Exclude 10 columns
#     sheet 1
opspan.NDV <- read_excel('./psychometric_data/SR-Sentences_AnalysisSummary.xlsx', sheet = 1,range = 'B11:I52', skip = 10)
opspan.NDV.raw <- read_excel('./psychometric_data/SR-Sentences_AnalysisSummary.xlsx', sheet = 2)
#Isolate Spillover Rules from opspan.NDV.raw
spillOver.beh.raw <-  opspan.NDV.raw[stri_compare(opspan.NDV.raw$`Practice Expt`, 'Spillover')== 1, ]
#PID.raw <-  !is.na(match(spillOver.beh.raw$`Expt #`, unique(fMRI.notes$`Expt #`)))
#PID.avg <-  !is.na(match(opspan.NDV$`Expt #`, unique(fMRI.notes$`Expt #`)))
allDat.participants <- intersect(scanned.fMRI.subjects$X1,
intersect(e.prime.dat.subjects,
intersect(opspan.NDV$`Expt #`,fMRI.notes.subjects )))
possibly.missing <- length(e.prime.dat.subjects) - length(allDat.participants)
substring(FileNames, first = 20, last = 24) %>% as.numeric()# %>% kable()
female.subjects <-  sum(spillOver.beh.raw$Gender[!is.na(match(spillOver.beh.raw$`Expt #`, allDat.participants))] == "Female")
#rename column to 'subject'
names(opspan.NDV)[1]='subject'
#initialize variables
acc.by.block <- c()
hits <- c()
miss <- c()
false.alarm <- c()
corr.reject <- c()
s <-  c()
condition <- c()
block.end.report <- c()
sub.condition <- c()
target.letter <- c()
trial.onset <- c()
break.onset <- c()
pulse.t1 <- c()
pulse.t2 <- c()
sess.time <- c()
i = 1 # index to save data
#Sys.glob("./raw_data/*P*.txt") # dir('./raw_data/',pattern = '[].txt')
#iterate through participants
for (p in FileNames) {
#read in e-prime data for each participant using rprime package
data_temp <- read_eprime(paste0('./raw_data/',p))
#format data into dataframe
datafile <- FrameList(data_temp)
datafile.frm.df <- to_data_frame(datafile)
acc.by.block <-  c(acc.by.block, datafile.frm.df$Cue.ACC[1:108] %>% as.numeric() %>% as.matrix() %>% reshape(., 9,12) %>% colMeans(na.rm=T))
#d': we need false alarm rate and hit rate
#   hits: subject correctly reported signal that occured
#   miss: subject did not report signal that occured
#   false alarm: subject wrongly reported a signal that did not occur
#   correct rejection: subject correctly did not report a signal that did not occur
data.trunc <- datafile.frm.df[2:108, ] #just removing trailing NaNs
# logical indices
stim.on    <- data.trunc$letter == 'J' | data.trunc$letter == 'q' |data.trunc$letter == 'j' |
data.trunc$letter == 'Q' | data.trunc$letter == 'F' | data.trunc$letter == 'f' |
data.trunc$letter == 'n' | data.trunc$letter == 'N'
signal.on  <- data.trunc$CorrectRespLetter == 'y'
signal.off <- !signal.on
hits        <- c(hits, sum(data.trunc$Cue.RESP[stim.on & signal.on]== data.trunc$CorrectRespLetter[stim.on & signal.on]))
miss        <- c(miss, sum(data.trunc$Cue.RESP[stim.on & signal.on]!= data.trunc$CorrectRespLetter[stim.on & signal.on]))
false.alarm <- c(false.alarm, sum(data.trunc$Cue.RESP[stim.on & signal.off]!= data.trunc$CorrectRespLetter[stim.on & signal.off]))
corr.reject <- c(corr.reject, sum(data.trunc$Cue.RESP[stim.on & signal.off] == data.trunc$CorrectRespLetter[stim.on & signal.off]))
block.end.ind <- !is.na(datafile.frm.df$RuleCheckSlide.RESP)
block.end.report <-  c(block.end.report ,datafile.frm.df$RuleCheckSlide.RESP[block.end.ind])
#Aggregate data by particiant
s[i] <- substring(p, first = 20, last = 24) %>% as.numeric()  #subject ID
condition[i] <- substring(p, first = 6, last = 8)
sub.condition[i] <- substring(p, first = 15, last = 18)
target.letter[i] <- data.trunc$letter[stim.on][1]
## ONSET TIMES
#onset times for each block calculated by subtracting the first onset time from the rest and taking the
#the onset time of the first letter in each block. divided by 1000 to convert to seconds from ms.
#These are rounded to 1 decimal place.
onTime.temp <- as.numeric(data.trunc$Cue.OnsetTime[!is.na(data.trunc$Cue.OnsetTime)])
temp.times <- round((onTime.temp - onTime.temp[1]) / 1000)
trial.onset <-  c(trial.onset, temp.times)# %>%
# as.matrix() %>%
# reshape(., 8,12))
break.onset <-  c(break.onset, temp.times[seq(8,96-8, 8)] + 2)#shift by 2 seconds
sess.time <- c(sess.time, datafile.frm.df$SessionTime[1])
pulse.t1 <- c(pulse.t1, data.trunc$PulseSync1.RESP)
pulse.t2 <- c(pulse.t2, data.trunc$PulseSync2.RESP)
i = i + 1
}
#Reshape into matrix participants by block
participants <- length(FileNames)
nBlocks <- 12
ntrials <- 8
ntotTrials <- 96
nBreak = 11
nReports <- 5 #PSubjects were asked how many times they 'know the rule'
rules.acc <- reshape(as.matrix(acc.by.block), participants, nBlocks)
block.onset.temp <- trial.onset %>% as.matrix() %>% reshape(.,  nBlocks * ntrials, participants)
block.onset.subject <- data.frame('subject'= s, 'block'= block.onset.temp[seq(1, ntotTrials, ntrials), ] %>% t())
break.onset.subject <- data.frame('subject' =s, 'break'= break.onset %>% as.matrix() %>% reshape(., 11, participants) %>% t())
exp.param <- data.frame('subject' = s,
condition,
sub.condition,
target.letter,
'Rule'=ifelse(target.letter=='q' | target.letter== 'Q'| target.letter=='J' | target.letter== 'j', 'vowel','letter'))
if (0) {
write.csv(block.onset.subject, 'block_onset_time_exp.txt', row.names = F)
write.csv(break.onset.subject, 'break_onset_time_exp.txt', row.names = F)
}
trial.onset
dcast
acc.by.block
length(trial.onset)
nBlocks * ntrials
nBlocks * ntrials * participants
reshape(as.matrix(trial.onset), participants, nBlocks * ntrials)
reshape(as.matrix(trial.onset), nBlocks * ntrials, participants)
trial.onset.subject <- reshape(as.matrix(trial.onset), nBlocks * ntrials, participants) %>% t()
View(trial.onset.subject)
write.csv(trial.onset.subject, 'trial_onset_time_exp.txt', row.names = F)
write.csv(trial.onset.subject, './processed/trial_onset_time_exp.txt', row.names = F)
length(trial.onset.subject)
shape(trial.onset.subject)
size(trial.onset.subject)
trial.onset.subject[,1]
trial.onset.subject[1,]
trial.onset.instr
break.onset.instr <- c()
trial.onset.instr <- c()
sess.time.instr <- c()
for (pi in FileNames.instr) {
data_temp <- read_eprime(paste0('./raw_data/', pi))
#format data into dataframe
datafile <- FrameList(data_temp)
datafile.df.instr <- to_data_frame(datafile)
data.trunc.instr <- datafile.df.instr[2:108, ]
# Onset times
onTime.temp <- as.numeric(data.trunc.instr$Cue.OnsetTime[!is.na(data.trunc.instr$Cue.OnsetTime)])
temp.times <- round((onTime.temp - onTime.temp[1]) / 1000)
trial.onset.instr <-  c(trial.onset.instr,
temp.times)
break.onset.instr <-  c(break.onset.instr, temp.times[seq(8,96-8, 8)] + 2)#shift by 2 seconds
sess.time.instr <- c(sess.time.instr, datafile.df.instr$SessionTime[1])
}
block.onset.temp <- trial.onset.instr %>% as.matrix() %>% reshape(.,  nBlocks * ntrials, participants)
block.onset.instr.subject <- data.frame('subject' = s, 'block'= block.onset.temp[seq(1,96,8), ] %>% t())
break.onset.instr.subject <- data.frame('subject' = s, 'break' = break.onset.instr %>% as.matrix() %>% reshape(., 11, participants) %>% t())
if (0) {
write.csv(block.onset.instr.subject, './processed/block_onset_time_instr.txt', row.names = F)
write.csv(break.onset.instr.subject, './processed/break_onset_time_instr.txt', row.names = F)
write.csv(break.onset.instr.subject, './processed/trial_onset_time_instr.txt', row.names = F)
}
trial.onset.instr
trial.onset.instr.subject <- reshape(as.matrix(trial.onset.instr), nBlocks * ntrials, participants) %>% t()
View(trial.onset.instr.subject)
write.csv(trial.onset.instr.subject, './processed/trial_onset_time_instr.txt', row.names = F)
dir('param_files/')
shiny::runApp('RLWM_ACTR/param_explorer')
install.packages('later')
shiny::runApp('RLWM_ACTR/param_explorer')
update.packages()
update.packages(ask = "graphics")
library(DescTools)
update.packages('expm')
library(DescTools)
update.packages(ask = "graphics")
setwd("~/RLWM_ACTR")
setwd('~/RLWM_ACTR/param_explorer/')
simsLTM    <- fromJSON('03_mod_LTM_all_brokenTest.JSON')#fromJSON('03_mod_LTM_all.JSON') #fromJSON('sim_data_all_params_LTM_100s_031620.JSON')
library(DescTools)
