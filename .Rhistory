LTM.fit %>% hist()
ind.temp.LTM
ind.temp.RL
ind.temp.RL_LTM
ind.temp.RL_LTM %>% unique()
participants.fit
uniq.RL-LTM.models <- ind.temp.RL_LTM[participants.fit==3] %>% unique()
uniq.LTM.models <- ind.temp.LTM[participants.fit==2] %>% unique()
uniq.RL_LTM.models <- ind.temp.RL_LTM[participants.fit==3] %>% unique()
uniq.LTM.models <- ind.temp.LTM[participants.fit==2] %>% unique()
uniq.LTM.models
uniq.LTM.models %>% length()
uniq.RL_LTM.models %>% length()
setwd('~/event_segmentation/')
file.edit('alpha_and_segmentation_analysis_v2.Rmd')
#ouput: html_document
rm(list = ls())
library(readxl)
#library(tidyverse)
library(ggplot2)
library(stringr)
library(psych)
library(tibble)
library(knitr)
library(reshape2)
library(MASS)
library(gridExtra)
library(matlab)
#segment.dat <- read.csv('./segmentation_by_subject_temp.csv')
segment.dat <- read.csv('./processed_data/results/segmentation_by_subject_01.21.20.csv')
exclude.subjects= c(28243)
subjects.temp <- segment.dat$subject
subjects = subjects.temp[subjects.temp!=exclude.subjects]
#IMPORTANT THIS FOLLOWS THE 'SUBJECTS' ORDER OF PARTICIPANTS - REALM FIRST THEN UCLIMB
subject.keyPresses.v1 <- readRDS('./processed_data/results/segmentation.keypresses.v1.01.21.20')
subject.keyPresses.v2 <- readRDS('./processed_data/results/segmentation.keypresses.v2.01.21.20')
subject.keyPresses.v3 <- readRDS('./processed_data/results/segmentation.keypresses.v3.01.21.20')
# Import EEG resting state data
EEG.data.raw <- read.csv('./Emotiv_EEG_Data/EEG_data_UClimb_and_REALM.csv') #%>% View()
#EEG.data.allchnls <- EEG.data[,c(1,2,4,132:257,1372:1497)]
#uclimb.psychometrics <- EEG.data [ , c(1,76, 115,119,125)]
index.subjects  = !is.na(match(as.numeric(EEG.data.raw$OLCTS.Expt..), subjects)) |
!is.na(match(as.numeric(EEG.data.raw$Python.Expt..), subjects))
#EEG.data <- EEG.data[, 5:ncol(EEG.data)]
#uclimb.psychometrics <- read.csv('./processed_data/uclimb_wm_ravens_data.csv')[index.subjects,3:6 ]
uclimb.psychometrics$compositeWM <- rowMeans(uclimb.psychometrics[,2:4]) #updatethis combine with REALM data
cbind(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% View()
cbind(EEG.data.raw$OLCTS.Expt.., EEG.data.raw$Python.Expt..,EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% View()
cbind(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% colMeans() %>% View()
cbind(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% rowMeans() %>% View()
cbind(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% rowMeans(na.rm = T) %>% View()
######## THESE SHOULD BE EDITED TO INCLUDE ALL CHANNELS
#this matrix includes
EEG.dat.temp <- cbind(EEG.data.raw[index.subjects,regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[index.subjects, regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()) %>%
rowMeans(na.rm = TRUE) %>%
as.matrix() %>%
reshape(., length(subjects),ncol(EEG.data.raw[,regexpr( "_OLCTS", names(EEG.data.raw))!=-1]) ) %>%
as.data.frame()
#rename the columns with clean manageabe names!
names(EEG.dat.temp) = str_split(names(EEG.data.raw)[regexpr( "_OLCTS", names(EEG.data.raw))!=-1], '_O',simplify = T)[,1]
EEG.data <- cbind('subjects'= EEG.data.raw$OLCTS.Expt..[index.subjects],
EEG.dat.temp)
###########COMBINE ALL ABOVE IN TO ONE DATAFRAME
over.segment = ifelse(scale(segment.dat[,2:4]) > 1,1,0 )
under.segment = ifelse(scale(segment.dat[,2:4]) < -1,-1,0 )
segmenter = over.segment + under.segment
norm.segmenter.p = 1-(rowSums(segmenter!=0) / 3)
# assign probability of a participant being normal segmenter or over/under segmenter
alpha_and_seg <- cbind(segment.dat, age = EEG.data$Age[index.subjects], alpha.dat, norm.segmenter.p) #this contains the segmentation and alpha in one table
View(EEG.data)
View(EEG.data$AF3_Theta_power)
View(EEG.data)
View(EEG.dat.temp)
View(cbind(EEG.data.raw[index.subjects,regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[index.subjects, regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()) %>%
rowMeans(na.rm = TRUE))
View(cbind(EEG.data.raw[index.subjects,regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[index.subjects, regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()))
cbind(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% View()
olcts.dat <- EEG.data.raw[index.subjects,regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1]
View(olcts.dat$AF3_Theta_power_OLCTS_StandardBand_Closed)
View(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed)
(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed
)
(EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed)
(EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% t()
cbind(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed, EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed) %>% rowMeans(na.rm = T)
(EEG.data.raw$AF3_Theta_power_Python_StandardBand_Closed[index.subjects])
(EEG.data.raw$AF3_Theta_power_OLCTS_StandardBand_Closed[index.subjects])
index.subjects
#this matrix includes
EEG.dat.temp <- cbind(EEG.data.raw[regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[ regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()) %>%
rowMeans(na.rm = TRUE) %>%
as.matrix() %>%
reshape(., length(subjects),ncol(EEG.data.raw[,regexpr( "_OLCTS", names(EEG.data.raw))!=-1]) ) %>%
as.data.frame()
test_temp=cbind(EEG.data.raw[regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[ regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()) %>%
rowMeans(na.rm = TRUE)
View(test_temp)
subjects
#this matrix includes
EEG.dat.temp <- cbind(EEG.data.raw[regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[ regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()) %>%
rowMeans(na.rm = TRUE) %>%
as.matrix() %>%
reshape(., nrow(EEG.data.raw),ncol(EEG.data.raw[,regexpr( "_OLCTS", names(EEG.data.raw))!=-1]) ) %>%
as.data.frame()
View(EEG.dat.temp)
names(EEG.dat.temp) = str_split(names(EEG.data.raw)[regexpr( "_OLCTS", names(EEG.data.raw))!=-1], '_O',simplify = T)[,1]
View(EEG.dat.temp)
length(index.subjects)
index.subjects
!is.na(match(as.numeric(EEG.data.raw$OLCTS.Expt..), subjects)
!is.na(match(as.numeric(EEG.data.raw$OLCTS.Expt..), subjects))
!is.na(match(as.numeric(EEG.data.raw$Python.Expt..), subjects))
subjects
EEG.data.raw$OLCTS.Expt..
View(EEG.dat.temp$AF3_Theta_power[index.subjects])
EEG.dat.temp$AF3_Theta_power
index.subjects
######## THESE SHOULD BE EDITED TO INCLUDE ALL CHANNELS
#this matrix includes
EEG.dat.temp <- cbind(EEG.data.raw[index.subjects,regexpr( "_OLCTS", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c(),
EEG.data.raw[index.subjects, regexpr( "_python", names(EEG.data.raw), ignore.case = TRUE)!=-1] %>%
as.matrix() %>%
c()) %>%
rowMeans(na.rm = TRUE) %>%
as.matrix() %>%
reshape(., length(subjects),ncol(EEG.data.raw[,regexpr( "_OLCTS", names(EEG.data.raw))!=-1]) ) %>%
as.data.frame()
#rename the columns with clean manageabe names!
names(EEG.dat.temp) = str_split(names(EEG.data.raw)[regexpr( "_OLCTS", names(EEG.data.raw))!=-1], '_O',simplify = T)[,1]
EEG.data <- cbind('subjects'= EEG.data.raw$OLCTS.Expt..[index.subjects],
EEG.dat.temp)
###########COMBINE ALL ABOVE IN TO ONE DATAFRAME
over.segment = ifelse(scale(segment.dat[,2:4]) > 1,1,0 )
under.segment = ifelse(scale(segment.dat[,2:4]) < -1,-1,0 )
segmenter = over.segment + under.segment
norm.segmenter.p = 1-(rowSums(segmenter!=0) / 3)
# assign probability of a participant being normal segmenter or over/under segmenter
alpha_and_seg <- cbind(segment.dat, age = EEG.data$Age[index.subjects], alpha.dat, norm.segmenter.p) #this contains the segmentation and alpha in one table
fig.v3 <- subject.keyPresses.v3[] %>%
melt() %>%
ggplot(aes(value, L1)) + geom_point(size=2, alpha=0.4)+#(shape=3, size=2) +
xlab('time(s)') + ylab('Subject number') +
theme_classic(base_size = 18) + xlim(c(1,250)) +
labs(title='Key presses in Video 3(v7)')
fig.v2 <-subject.keyPresses.v2 %>%
melt() %>%
ggplot(aes(value, L1)) + geom_point(size=2, alpha=0.4)+#(shape=3, size=2) +
xlab('time(s)') + ylab('Subject number') +
theme_classic(base_size = 18) + xlim(c(1,250)) +
labs(title='Key presses in Video 2(v5)')
fig.v1 <- subject.keyPresses.v1 %>%
melt() %>%
ggplot(aes(value, L1)) + geom_point(size=2, alpha=0.4)+#(shape=3, size=2) +
xlab('time(s)') + ylab('Subject number') +
theme_classic(base_size = 18) + xlim(c(1,250)) +
labs(title='Key presses in Video 1(v1)')
grid.arrange(fig.v1,fig.v2,fig.v3, nrow = 1, ncol = 3)
is.data.frame(EEG.dat.temp)
subjects
abline
abline()
plot(EEG.dat.temp$AF3_Theta_power, EEG.dat.temp$AF3_Alpha_power)
abline()
abline(cor(EEG.dat.temp$AF3_Theta_power, EEG.dat.temp$AF3_Alpha_power))
lm(EEG.dat.temp$AF3_Theta_power~ EEG.dat.temp$AF3_Alpha_power)
abline(lm(EEG.dat.temp$AF3_Theta_power~ EEG.dat.temp$AF3_Alpha_power))
summary(lm(EEG.dat.temp$AF3_Theta_power~ EEG.dat.temp$AF3_Alpha_power))
?cor()
corr
plot()
plot(1,1)
grid.arrange(plot(1,1), ThetaAf3,  ThetaAF4, plot(1,1), ThetaF7, ThetaF3, ThetaF4, ThetaF8, plot(1,1), ThetaFC5, ThetaFC6, plot(1,1),   )
grid.arrange(plot(1,1), ThetaAf3,  ThetaAF4, plot(1,1), ThetaF7, ThetaF3, ThetaF4, ThetaF8, plot(1,1), ThetaFC5, ThetaFC6, ThetaT7, plot(1,1), plot(1,1),ThetaT8, ThetaP7, plot(1,1), plot(1,1), ThetaP8, plot(1,1), ThetaO1, ThetaO2, plot(1,1))
plot(1,1 axes = FALSE)
plot(1,1, axes = FALSE)
plot(1,1, axes = FALSE, labels=F)
plot(1,1, axes = FALSE, frame.plot = F)
plot(1,1, axes = FALSE, frame.plot = FALSE)
plot(1,1, axes = FALSE, cex=0)
plot(1,1, axes = FALSE, cex=0, cex.axis=0)
plot(1,1, axes = FALSE, cex=0, cex.axis=FALSE)
plot(1,1, axes = FALSE, cex=0, cex.axis=)
plot(1,1, axes = FALSE, cex.axis=0)
plot(1,1, axes = FALSE)
plot(1,1, axes = FALSE, cex=0)
plot(1,1, axes = FALSE, cex=0, fg=1)
plot(1,1, axes = FALSE, cex=0, fg=3)
grid.arrange(plot(1,1, axes = FALSE, cex=0), ThetaAf3,  ThetaAF4, plot(1,1, axes = FALSE, cex=0), ThetaF7, ThetaF3, ThetaF4, ThetaF8, plot(1,1, axes = FALSE, cex=0), ThetaFC5, ThetaFC6, ThetaT7, plot(1,1, axes = FALSE, cex=0), plot(1,1, axes = FALSE, cex=0),ThetaT8, ThetaP7, plot(1,1, axes = FALSE, cex=0), plot(1,1, axes = FALSE, cex=0), ThetaP8, plot(1,1, axes = FALSE, cex=0), ThetaO1, ThetaO2, plot(1,1, axes = FALSE, cex=0)
)
grid.arrange(plot(1,1, axes = FALSE, cex=0), ThetaAf3,  ThetaAF4, plot(1,1, axes = FALSE, cex=0), ThetaF7, ThetaF3, ThetaF4, ThetaF8, plot(1,1, axes = FALSE, cex=0), ThetaFC5, ThetaFC6, ThetaT7, plot(1,1, axes = FALSE, cex=0), plot(1,1, axes = FALSE, cex=0),ThetaT8, ThetaP7, plot(1,1, axes = FALSE, cex=0), plot(1,1, axes = FALSE, cex=0), ThetaP8, plot(1,1, axes = FALSE, cex=0), ThetaO1, ThetaO2, plot(1,1, axes = FALSE, cex=0))
grid.arrange(plot(1,1), plot(1,1), plot(1,1), plot(1,1), nrow=2,ncol=2)
decoy
decoy=plot(1,1)
grid.arrange(decoy, decoy,decoy,decoy nrow=2,ncol=2)
grid.arrange(decoy, decoy,decoy,decoy, nrow=2,ncol=2)
grobs
decoy
gplot
ggplot2::ggplot(c(1:10), c(1:10))
ggplot2::ggplot(aes(c(1:10), c(1:10))
geom_point()
ggplot2::ggplot(aes(c(1:10), c(1:10))+ geom_point()
ggplot(aes(c(1:10), c(1:10))+ geom_point()
ggplot(aes(c(1:10), c(1:10)))+ geom_point()
gplot()
qplot(c(1:10), c(1:10))
decoy=qplot(c(1:10), c(1:10))
decoy
grid.arrange(decoy, decoy,decoy,decoy, nrow=2,ncol=2)
grid.arrange(decoy, decoy,decoy,plot(1,1), nrow=2,ncol=2)
qplot(EEG.dat.temp$AF3_Theta_power, EEG.dat.temp$AF3_Alpha_power)
qplot(EEG.dat.temp$AF3_Theta_power, EEG.dat.temp$AF3_Alpha_power, xlab = "yaya", ylab="wawa")
setwd('~/RLWM_ACTR/')
#rm(list = ls())
library(matlab)
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(MLmetrics)
library(readr)
library(data.table)
library(jsonlite)
library(data.table)
library(knitr)
library(gridExtra)
#----- import subject data
#
sdat = fread('./RLWM_data/all_subject_n83_learn_test_data.csv', header = T) %>% t()
# sdat contains data fro 83 participants (columns),
# rows 1:12 learn accuracy set 3 ;
# rows 13:24 learn accuracy set 6 ;
# row 25 test set 3 accuracy ;
# row 26 test set 6 accuracy ;
#------ Modify subject data to 'weight' accuracy in test for 3 and 6 by repeating each 12x
sdat.temp <- rep(sdat[ , 25:26], 12) %>%
as.matrix() %>%
reshape(., 996,2) %>%
reshape(., 166,12)
sdat.mod  <- cbind(sdat[, 1:24],
sdat.temp[1:83,],
sdat.temp[84:166, ])
#----- import model data (has to be converted from JSON to data frames)
#--------- Integrated model
simsRL_LTM <- fromJSON('sim_data_all_params_integrated_model_100s_031620.JSON')
simsRL_LTM.set3learn <- simsRL_LTM$data$set3_learn %>%
unlist() %>%
as.matrix() %>%
reshape(., 12, 3125) %>%
t()
simsRL_LTM.set6learn <- simsRL_LTM$data$set6_learn %>%
unlist() %>%
as.matrix() %>%
reshape(., 12, 3125) %>%
t()
simsRL_LTM.s3s6test.temp <-
simsRL_LTM$data$set3_test %>%
cbind(., simsRL_LTM$data$set6_test) %>%
rep(., 12) %>%
as.matrix() %>%
reshape(., 37500, 2) %>%
reshape(., 6250, 12)
RL_LTM.sim.dat <- cbind(simsRL_LTM.set3learn,
simsRL_LTM.set6learn,
simsRL_LTM.s3s6test.temp[1:3125, ],
simsRL_LTM.s3s6test.temp[3126:6250, ] )
#--------- Reinforcement Learning Model
simsRL <- fromJSON('sim_data_all_params_RL_100s_031620.JSON')
simsRL.set3learn <- simsRL$data$set3_learn %>%
unlist() %>%
as.matrix() %>%
reshape(., 12, 25) %>%
t()
simsRL.set6learn <- simsRL$data$set6_learn %>%
unlist() %>%
as.matrix() %>%
reshape(., 12, 25) %>%
t()
simsRL.s3s6test.temp <-
simsRL$data$set3_test %>%
cbind(., simsRL$data$set6_test) %>%
rep(., 12) %>%
as.matrix() %>%
reshape(., 300, 2) %>%
reshape(., 50, 12)
RL.sim.dat <- cbind(simsRL.set3learn,
simsRL.set6learn,
simsRL.s3s6test.temp[1:25, ],
simsRL.s3s6test.temp[26:50, ] )
#--------- Longterm Memory/WM/Declarative model
simsLTM    <- fromJSON('03_mod_LTM_all.JSON')
simsLTM.set3learn <- simsLTM$data$set3_learn %>%
unlist() %>%
as.matrix() %>%
reshape(., 12, 125) %>%
t()
simsLTM.set6learn <- simsLTM$data$set6_learn %>%
unlist() %>%
as.matrix() %>%
reshape(., 12, 125) %>%
t()
simsLTM.s3s6test.temp <-  simsLTM$data$set3_test %>%
cbind(., simsLTM$data$set6_test) %>%
rep(., 12) %>%
as.matrix() %>%
reshape(., 1500, 2) %>%
reshape(., 250, 12)
LTM.sim.dat <- cbind(simsLTM.set3learn,
simsLTM.set6learn,
simsLTM.s3s6test.temp[1:125, ],
simsLTM.s3s6test.temp[126:250, ] )
#----- loop through subject data and check for fit against model data using mean squared error.
mseRL.temp     =c()
mseLTM.temp    =c()
mseRL_LTM.temp =c()
for(s in c(1:nrow(sdat.mod))) { # for each subject
# model 1
mseRL.temp     <- rbind(mseRL.temp, apply(RL.sim.dat, 1, function(x,y) MSE(x, sdat.mod[s, ])))
# model 2
mseLTM.temp    <- rbind(mseLTM.temp, apply(LTM.sim.dat, 1, function(x,y) MSE(x, sdat.mod[s, ] )))
# model 3
mseRL_LTM.temp <- rbind(mseRL_LTM.temp, apply(RL_LTM.sim.dat, 1, function(x,y) MSE(x, sdat.mod[s, ])))
}
#------ Exrtact row indices to get parameter set of parameters for best fit model
#------------first find the smalled mse
RL.fit     = as.matrix(apply(mseRL.temp, 1, min))
LTM.fit    = as.matrix(apply(mseLTM.temp, 1, min))
RL_LTM.fit = as.matrix(apply(mseRL_LTM.temp, 1, min))
#temp <- mdat.3 %>%
#  data.table() %>%
#  .[,`:=`(V66 = V3 - mean(V3))]
#-------------second, find actual row number using smallest value
ind.temp.RL <- c()
ind.temp.RL_LTM <- c()
ind.temp.LTM <- c()
for ( i in 1:length(RL.fit)) {
ind.temp.RL <- rbind(ind.temp.RL, which(mseRL.temp[i,] %in% RL.fit[i]))
}
for ( i in 1:length(LTM.fit)) {
ind.temp.LTM <- rbind(ind.temp.LTM, which(mseLTM.temp[i,] %in% LTM.fit[i]))
}
for ( i in 1:length(RL_LTM.fit)) {
ind.temp.RL_LTM <- rbind(ind.temp.RL_LTM, which(mseRL_LTM.temp[i,] %in% RL_LTM.fit[i]))
}
#-------------which model fits a participant most?| 1= RL; 2= LTM; 3=RL_LTM
participants.fit <- ((cbind(RL.fit, LTM.fit, RL_LTM.fit) -1 ) * -1) %>%
max.col()
#participants.fit %>%
# hist(main='Counts of participants by model', xlab = ("1= RL; 2= LTM; 3=RL_LTM"), #lwd=4.3)
data.frame('cond'= participants.fit)  %>%
ggplot(aes(cond)) +
geom_histogram() +
ggtitle('Counts of participants by model') +
theme_classic(base_size = 20,base_family = 'Calibri')
LTM.fit
fit.labels <- ifelse(participants.fit==2, 'LTM', ifelse(participants.fit==3, 'RL-LTM','RL'))
fit.labels
plot(LTM.fit, RL_LTM.fit)
RL.fit
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit)) +
geom_point()
model.fits <- data.frame(RL.fit, LTM.fit, RL_LTM.fit, fit.labels)
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit)) +
geom_point()
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit, color=fit.labels)) +
geom_point()
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit, color=fit.labels)) +
geom_point() +geom_smooth()
RL.fit
#----- loop through subject data and check for fit against model data using mean squared error.
mseRL.temp     =c()
mseLTM.temp    =c()
mseRL_LTM.temp =c()
for(s in c(1:nrow(sdat.mod))) { # for each subject
# model 1
mseRL.temp     <- rbind(mseRL.temp, apply(RL.sim.dat, 1, function(x,y) MSE(x, sdat.mod[s, ])))
# model 2
mseLTM.temp    <- rbind(mseLTM.temp, apply(LTM.sim.dat, 1, function(x,y) MSE(x, sdat.mod[s, ] )))
# model 3
mseRL_LTM.temp <- rbind(mseRL_LTM.temp, apply(RL_LTM.sim.dat, 1, function(x,y) MSE(x, sdat.mod[s, ])))
}
#------ Exrtact row indices to get parameter set of parameters for best fit model
#------------first find the smalled mse
RL.fit     = as.matrix(apply(mseRL.temp, 1, min))     %>% sqrt()
LTM.fit    = as.matrix(apply(mseLTM.temp, 1, min))    %>% sqrt()
RL_LTM.fit = as.matrix(apply(mseRL_LTM.temp, 1, min)) %>% sqrt()
#temp <- mdat.3 %>%
#  data.table() %>%
#  .[,`:=`(V66 = V3 - mean(V3))]
#-------------second, find actual row number using smallest value
ind.temp.RL <- c()
ind.temp.RL_LTM <- c()
ind.temp.LTM <- c()
for ( i in 1:length(RL.fit)) {
ind.temp.RL <- rbind(ind.temp.RL, which(mseRL.temp[i,] %in% RL.fit[i]))
}
for ( i in 1:length(LTM.fit)) {
ind.temp.LTM <- rbind(ind.temp.LTM, which(mseLTM.temp[i,] %in% LTM.fit[i]))
}
for ( i in 1:length(RL_LTM.fit)) {
ind.temp.RL_LTM <- rbind(ind.temp.RL_LTM, which(mseRL_LTM.temp[i,] %in% RL_LTM.fit[i]))
}
#-------------which model fits a participant most?| 1= RL; 2= LTM; 3=RL_LTM
participants.fit <- ((cbind(RL.fit, LTM.fit, RL_LTM.fit) -1 ) * -1) %>%
max.col()
#fit plots
#participants.fit %>%
# hist(main='Counts of participants by model', xlab = ("1= RL; 2= LTM; 3=RL_LTM"), #lwd=4.3)
fit.labels <- ifelse(participants.fit==2, 'LTM', ifelse(participants.fit==3, 'RL-LTM','RL'))
data.frame('cond'= participants.fit)  %>%
ggplot(aes(cond)) +
geom_histogram() +
ggtitle('Counts of participants by model') +
theme_classic(base_size = 20,base_family = 'Calibri')
model.fits <- data.frame(RL.fit, LTM.fit, RL_LTM.fit, fit.labels)
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit, color=fit.labels)) +
geom_point() +geom_smooth()
data.frame('cond'= participants.fit)  %>%
ggplot(aes(cond)) +
geom_histogram() +
ggtitle('Counts of participants by model') +
theme_classic(base_size = 20,base_family = 'Calibri')
model.fits <- data.frame(RL.fit, LTM.fit, RL_LTM.fit, fit.labels)
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit, color=fit.labels)) +
geom_point() +geom_smooth()
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit, color=fit.labels)) +
geom_point() +
geom_smooth() +
theme_classic(base_size = 20,base_family = 'Calibri')
model.fits %>% ggplot(aes(LTM.fit,RL_LTM.fit, color=fit.labels)) +
geom_point() +
geom_smooth() +
theme_bw(base_size = 20,base_family = 'Calibri')
model.fits %>% max()
RL.fit %>% max()
RL_LTM.fit %>% max()
model.fits %>% melt()
(cbind(RL.fit, LTM.fit, RL_LTM.fit)
)
model.fits %>%
melt() %>%
ggplot(aes(value, color=variable)) +
geom_point() +
geom_smooth() +
theme_bw(base_size = 20,base_family = 'Calibri')
model.fits %>%
melt() %>%
ggplot(aes(value, color=variable)) +
geom_boxplot() +
theme_bw(base_size = 20,base_family = 'Calibri')
model.fits %>%
melt() %>%
ggplot(aes(y=value, color=variable)) +
geom_boxplot() +
theme_bw(base_size = 20,base_family = 'Calibri')
model.fits %>%
melt() %>%
ggplot(aes(y=value,variable, color=variable)) +
geom_boxplot() +
ggtitle('Root mean squared error')+
xlab('model')+
theme_bw(base_size = 20,base_family = 'Calibri')
model.fits %>%
melt() %>%
ggplot(aes(y=value,variable, color=variable)) +
geom_boxplot() +
geom_density()+
ggtitle('Root mean squared error')+
xlab('model')+
theme_bw(base_size = 20,base_family = 'Calibri')
model.fits %>%
melt() %>%
ggplot(aes(y=value,variable, group=variable)) +
geom_boxplot() +
ggtitle('Root mean squared error')+
xlab('model')+
theme_bw(base_size = 20,base_family = 'Calibri')+
theme(legend.position='none')
RL.sim.dat[,1:12]
RL.sim.dat[,1:12] %>% colMeans()
